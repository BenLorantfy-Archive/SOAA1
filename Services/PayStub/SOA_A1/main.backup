#pragma warning(disable : 4996) 
#pragma comment(lib,"ws2_32.lib") //Winsock Library

#ifndef _MAIN_C_
#define _MAIN_C_

#include"Employee.h"
//#include"HttpHelper.h"

#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <io.h>
#include <sys/types.h>
#include <WinSock2.h>
#include <stdint.h>

#define PORT    555
#define MAXMSG  512

#define CONNMAX 1000
#define BYTES 1024

char *ROOT;
int listenfd, clients[CONNMAX];
void error(char *);
void startServer(char *);
void respond(int);

int read_from_client(int filedes)
{
	char buffer[MAXMSG];
	int nbytes;

	nbytes = read(filedes, buffer, MAXMSG);
	if (nbytes < 0)
	{
		/* Read error. */
		perror("read");
		exit(EXIT_FAILURE);
	}
	else if (nbytes == 0)
		/* End-of-file. */
		return -1;
	else
	{
		/* Data read. */
		fprintf(stderr, "Server: got message: `%s'\n", buffer);
		return 0;
}
}

// #define _TEST_

#ifdef _TEST_

/// <summary>
/// Main function of the program.
/// </summary>
/// <returns>0 if successful, anything else otherwise.</returns>
int main()
{
	Employee employee = NewEmployee(EMPLOYEE_TYPE_FULL_TIME, 40, 25);
	printf("Employee: %d | %f | %f", employee.type, employee.hours, employee.rate);
	getchar();
	return 0;
}

#else

int main(void)
{
	extern int make_socket(uint16_t port);
	int sock;
	fd_set active_fd_set, read_fd_set;
	int i;
	struct sockaddr_in clientname;
	size_t size;

	WSADATA wsa;

	printf("\nInitialising Winsock...");
	if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
	{
		printf("Failed. Error Code : %d", WSAGetLastError());
		return 1;
	}

	printf("Initialised.\n");

	// Create the socket and set it up to accept connections.
	sock = make_socket(PORT);
	if (listen(sock, 1) < 0)
	{
		perror("listen");
		exit(EXIT_FAILURE);
	}

	// Initialize the set of active sockets.
	FD_ZERO(&active_fd_set);
	FD_SET(sock, &active_fd_set);

	while (1)
	{
		// Block until input arrives on one or more active sockets.
		read_fd_set = active_fd_set;
		if (select(FD_SETSIZE, &read_fd_set, NULL, NULL, NULL) < 0)
		{
			perror("select");
			exit(EXIT_FAILURE);
		}

		// Service all the sockets with input pending.
		for (i = 0; i < FD_SETSIZE; ++i)
			if (FD_ISSET(i, &read_fd_set))
			{
				if (i == sock)
				{
					// Connection request on original socket.
					int new;
					size = sizeof(clientname);
					new = accept(sock,
						(struct sockaddr *) &clientname,
						&size);
					if (new < 0)
					{
						perror("accept");
						exit(EXIT_FAILURE);
					}
					fprintf(stderr,
						"Server: connect from host %s, port %hd.\n",
						inet_ntoa(clientname.sin_addr),
						ntohs(clientname.sin_port));
					FD_SET(new, &active_fd_set);
				}
				else
				{
					// Data arriving on an already-connected socket.
					if (read_from_client(i) < 0)
					{
						close(i);
						FD_CLR(i, &active_fd_set);
					}
				}
			}
	}
}

#endif // _TEST_


int make_socket(uint16_t port)
{
	int sock;
	struct sockaddr_in name;

	/* Create the socket. */
	sock = socket(PF_INET, SOCK_STREAM, 0);
	if (sock < 0)
	{
		perror("socket");
		exit(EXIT_FAILURE);
	}

	/* Give the socket a name. */
	name.sin_family = AF_INET;
	name.sin_port = htons(port);
	name.sin_addr.s_addr = inet_addr("127.0.0.1"); //htonl(INADDR_ANY);
	if (bind(sock, (struct sockaddr *) &name, sizeof(name)) < 0)
	{
		perror("bind");
		exit(EXIT_FAILURE);
	}

	return sock;
}

#endif